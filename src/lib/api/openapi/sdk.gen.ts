// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { ListProjectsApiV1ProjectsGetData, ListProjectsApiV1ProjectsGetResponses, CreateProjectApiV1ProjectsPostData, CreateProjectApiV1ProjectsPostResponses, CreateProjectApiV1ProjectsPostErrors, DeleteProjectApiV1ProjectsPidDeleteData, DeleteProjectApiV1ProjectsPidDeleteResponses, DeleteProjectApiV1ProjectsPidDeleteErrors, GetProjectApiV1ProjectsPidGetData, GetProjectApiV1ProjectsPidGetResponses, GetProjectApiV1ProjectsPidGetErrors, UpdateProjectApiV1ProjectsPidPatchData, UpdateProjectApiV1ProjectsPidPatchResponses, UpdateProjectApiV1ProjectsPidPatchErrors, ListMediaApiV1ProjectsPidMediaGetData, ListMediaApiV1ProjectsPidMediaGetResponses, ListMediaApiV1ProjectsPidMediaGetErrors, AddMediaApiV1ProjectsPidMediaPostData, AddMediaApiV1ProjectsPidMediaPostResponses, AddMediaApiV1ProjectsPidMediaPostErrors, DeleteMediaApiV1ProjectsPidMediaMidDeleteData, DeleteMediaApiV1ProjectsPidMediaMidDeleteResponses, DeleteMediaApiV1ProjectsPidMediaMidDeleteErrors, GetMediaApiV1ProjectsPidMediaMidGetData, GetMediaApiV1ProjectsPidMediaMidGetResponses, GetMediaApiV1ProjectsPidMediaMidGetErrors, ListApiV1ProjectsPidModelsGetData, ListApiV1ProjectsPidModelsGetResponses, ListApiV1ProjectsPidModelsGetErrors, AddApiV1ProjectsPidModelsPostData, AddApiV1ProjectsPidModelsPostResponses, AddApiV1ProjectsPidModelsPostErrors, RemoveApiV1ProjectsPidModelsMidDeleteData, RemoveApiV1ProjectsPidModelsMidDeleteResponses, RemoveApiV1ProjectsPidModelsMidDeleteErrors, PatchApiV1ProjectsPidModelsMidPatchData, PatchApiV1ProjectsPidModelsMidPatchResponses, PatchApiV1ProjectsPidModelsMidPatchErrors, ListImageAnnotationsApiV1ProjectsPidAnnotationsImageGetData, ListImageAnnotationsApiV1ProjectsPidAnnotationsImageGetResponses, ListImageAnnotationsApiV1ProjectsPidAnnotationsImageGetErrors, AddImageAnnotationApiV1ProjectsPidAnnotationsImagePostData, AddImageAnnotationApiV1ProjectsPidAnnotationsImagePostResponses, AddImageAnnotationApiV1ProjectsPidAnnotationsImagePostErrors, DeleteImageAnnotationApiV1ProjectsPidAnnotationsImageAidDeleteData, DeleteImageAnnotationApiV1ProjectsPidAnnotationsImageAidDeleteResponses, DeleteImageAnnotationApiV1ProjectsPidAnnotationsImageAidDeleteErrors, ListVideoAnnotationsApiV1ProjectsPidAnnotationsVideoGetData, ListVideoAnnotationsApiV1ProjectsPidAnnotationsVideoGetResponses, ListVideoAnnotationsApiV1ProjectsPidAnnotationsVideoGetErrors, AddVideoAnnotationApiV1ProjectsPidAnnotationsVideoPostData, AddVideoAnnotationApiV1ProjectsPidAnnotationsVideoPostResponses, AddVideoAnnotationApiV1ProjectsPidAnnotationsVideoPostErrors, DeleteVideoAnnotationApiV1ProjectsPidAnnotationsVideoAidDeleteData, DeleteVideoAnnotationApiV1ProjectsPidAnnotationsVideoAidDeleteResponses, DeleteVideoAnnotationApiV1ProjectsPidAnnotationsVideoAidDeleteErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Projects
 */
export const listProjectsApiV1ProjectsGet = <ThrowOnError extends boolean = false>(options?: Options<ListProjectsApiV1ProjectsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProjectsApiV1ProjectsGetResponses, unknown, ThrowOnError>({
        url: '/api/v1/projects',
        ...options
    });
};

/**
 * Create Project
 */
export const createProjectApiV1ProjectsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProjectApiV1ProjectsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectApiV1ProjectsPostResponses, CreateProjectApiV1ProjectsPostErrors, ThrowOnError>({
        url: '/api/v1/projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Project
 */
export const deleteProjectApiV1ProjectsPidDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectApiV1ProjectsPidDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectApiV1ProjectsPidDeleteResponses, DeleteProjectApiV1ProjectsPidDeleteErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}',
        ...options
    });
};

/**
 * Get Project
 */
export const getProjectApiV1ProjectsPidGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectApiV1ProjectsPidGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectApiV1ProjectsPidGetResponses, GetProjectApiV1ProjectsPidGetErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}',
        ...options
    });
};

/**
 * Update Project
 */
export const updateProjectApiV1ProjectsPidPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectApiV1ProjectsPidPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateProjectApiV1ProjectsPidPatchResponses, UpdateProjectApiV1ProjectsPidPatchErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Media
 */
export const listMediaApiV1ProjectsPidMediaGet = <ThrowOnError extends boolean = false>(options: Options<ListMediaApiV1ProjectsPidMediaGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMediaApiV1ProjectsPidMediaGetResponses, ListMediaApiV1ProjectsPidMediaGetErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/media',
        ...options
    });
};

/**
 * Add Media
 */
export const addMediaApiV1ProjectsPidMediaPost = <ThrowOnError extends boolean = false>(options: Options<AddMediaApiV1ProjectsPidMediaPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMediaApiV1ProjectsPidMediaPostResponses, AddMediaApiV1ProjectsPidMediaPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/projects/{pid}/media',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete Media
 */
export const deleteMediaApiV1ProjectsPidMediaMidDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMediaApiV1ProjectsPidMediaMidDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMediaApiV1ProjectsPidMediaMidDeleteResponses, DeleteMediaApiV1ProjectsPidMediaMidDeleteErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/media/{mid}',
        ...options
    });
};

/**
 * Get Media
 */
export const getMediaApiV1ProjectsPidMediaMidGet = <ThrowOnError extends boolean = false>(options: Options<GetMediaApiV1ProjectsPidMediaMidGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMediaApiV1ProjectsPidMediaMidGetResponses, GetMediaApiV1ProjectsPidMediaMidGetErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/media/{mid}',
        ...options
    });
};

/**
 * List
 */
export const listApiV1ProjectsPidModelsGet = <ThrowOnError extends boolean = false>(options: Options<ListApiV1ProjectsPidModelsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListApiV1ProjectsPidModelsGetResponses, ListApiV1ProjectsPidModelsGetErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/models',
        ...options
    });
};

/**
 * Add
 */
export const addApiV1ProjectsPidModelsPost = <ThrowOnError extends boolean = false>(options: Options<AddApiV1ProjectsPidModelsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddApiV1ProjectsPidModelsPostResponses, AddApiV1ProjectsPidModelsPostErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/models',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove
 */
export const removeApiV1ProjectsPidModelsMidDelete = <ThrowOnError extends boolean = false>(options: Options<RemoveApiV1ProjectsPidModelsMidDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveApiV1ProjectsPidModelsMidDeleteResponses, RemoveApiV1ProjectsPidModelsMidDeleteErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/models/{mid}',
        ...options
    });
};

/**
 * Patch
 */
export const patchApiV1ProjectsPidModelsMidPatch = <ThrowOnError extends boolean = false>(options: Options<PatchApiV1ProjectsPidModelsMidPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiV1ProjectsPidModelsMidPatchResponses, PatchApiV1ProjectsPidModelsMidPatchErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/models/{mid}',
        ...options
    });
};

/**
 * List Image Annotations
 */
export const listImageAnnotationsApiV1ProjectsPidAnnotationsImageGet = <ThrowOnError extends boolean = false>(options: Options<ListImageAnnotationsApiV1ProjectsPidAnnotationsImageGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListImageAnnotationsApiV1ProjectsPidAnnotationsImageGetResponses, ListImageAnnotationsApiV1ProjectsPidAnnotationsImageGetErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/annotations/image',
        ...options
    });
};

/**
 * Add Image Annotation
 */
export const addImageAnnotationApiV1ProjectsPidAnnotationsImagePost = <ThrowOnError extends boolean = false>(options: Options<AddImageAnnotationApiV1ProjectsPidAnnotationsImagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddImageAnnotationApiV1ProjectsPidAnnotationsImagePostResponses, AddImageAnnotationApiV1ProjectsPidAnnotationsImagePostErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/annotations/image',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Image Annotation
 */
export const deleteImageAnnotationApiV1ProjectsPidAnnotationsImageAidDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteImageAnnotationApiV1ProjectsPidAnnotationsImageAidDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteImageAnnotationApiV1ProjectsPidAnnotationsImageAidDeleteResponses, DeleteImageAnnotationApiV1ProjectsPidAnnotationsImageAidDeleteErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/annotations/image/{aid}',
        ...options
    });
};

/**
 * List Video Annotations
 */
export const listVideoAnnotationsApiV1ProjectsPidAnnotationsVideoGet = <ThrowOnError extends boolean = false>(options: Options<ListVideoAnnotationsApiV1ProjectsPidAnnotationsVideoGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListVideoAnnotationsApiV1ProjectsPidAnnotationsVideoGetResponses, ListVideoAnnotationsApiV1ProjectsPidAnnotationsVideoGetErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/annotations/video',
        ...options
    });
};

/**
 * Add Video Annotation
 */
export const addVideoAnnotationApiV1ProjectsPidAnnotationsVideoPost = <ThrowOnError extends boolean = false>(options: Options<AddVideoAnnotationApiV1ProjectsPidAnnotationsVideoPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddVideoAnnotationApiV1ProjectsPidAnnotationsVideoPostResponses, AddVideoAnnotationApiV1ProjectsPidAnnotationsVideoPostErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/annotations/video',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Video Annotation
 */
export const deleteVideoAnnotationApiV1ProjectsPidAnnotationsVideoAidDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteVideoAnnotationApiV1ProjectsPidAnnotationsVideoAidDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteVideoAnnotationApiV1ProjectsPidAnnotationsVideoAidDeleteResponses, DeleteVideoAnnotationApiV1ProjectsPidAnnotationsVideoAidDeleteErrors, ThrowOnError>({
        url: '/api/v1/projects/{pid}/annotations/video/{aid}',
        ...options
    });
};